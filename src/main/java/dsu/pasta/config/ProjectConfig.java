package dsu.pasta.config;

import dsu.pasta.utils.ZFileUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ProjectConfig extends Config {
    //TODO: check ProjectConfig.one().skip_read_byte_gadget
    public static final String TypeDistanceName = "TypeDistance.log";
    /**
     * Allow how many sketches that have no dataflow in a program
     */
    public static final int maxTransLen = 10;
    /**
     * Allow how many programs can be generated by a dataflow
     */
    public static int LIMIT_PRO_NUM_FOR_DF = 5000;
    /**
     * Range of types to read gadgets from. If new field type is primitive or string, this range is 1.
     */
    public static int readGadgetRange = 2; //0, 1 (2 is not included)
    /**
     * Only try top-n number of next usable statements for a partial program
     */

    public static int TRY_TOP_N_NEXT_STMT = 100;
    public static List<String> apiTypes = new ArrayList<>();

    private static ProjectConfig one;

    public String commitRoot;
    public String logRoot;
    public String gadgetRoot;
    //for process object
    public String dumpRoot;
    public String transObjRoot;
    public String testRoot;
    public String onlyCompareTag;
    public List<String> allTests;

    public VersionConfig oldVersion = new VersionConfig("old");
    public VersionConfig newVersion = new VersionConfig("new");
    //files for resolved operations
    private String usefulTestFile;

    public static ProjectConfig one() {
        if (one == null) {
            one = new ProjectConfig();
            one.parseConfig();
        }
        return one;
    }

    protected void parseConfig() {
        commitRoot = ZFileUtils.getPurePath(config.getString("commitRoot"));
        String allRoot = String.join(File.separator, commitRoot, ".pasta");

        logRoot = String.join(File.separator, allRoot, "log");
        ZFileUtils.createFullDirectory(logRoot);

        gadgetRoot = String.join(File.separator, allRoot, "gadget");
        ZFileUtils.createFullDirectory(gadgetRoot);

        dumpRoot = String.join(File.separator, allRoot, "dumpobjects");
        transObjRoot = String.join(File.separator, dumpRoot, "transformed");
        ZFileUtils.createFullDirectory(transObjRoot);

        testRoot = config.getString("testRoot");

        onlyCompareTag = config.getString("onlyCompareTag");

        apiTypes = Arrays.asList(config.getStringArray("apis.type"));

        usefulTestFile = config.getString("usefulTestFile");
        if (!ZFileUtils.fileExistNotEmpty(usefulTestFile)) {
            System.err.println(usefulTestFile + " doesn't exist or contains no tests");
        } else {
            allTests = new ArrayList<>(ZFileUtils.readFileToList(ProjectConfig.one().usefulTestFile));
        }
        oldVersion.parseConfig();
        newVersion.parseConfig();
    }
}
